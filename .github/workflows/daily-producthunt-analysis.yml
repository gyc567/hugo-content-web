name: Daily Product Hunt TOP3 Analysis

on:
  schedule:
    # 每天北京时间早上6:00运行（UTC 22:00前一天）
    - cron: '0 22 * * *'
  workflow_dispatch: # 允许手动触发

jobs:
  analyze-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # 允许写仓库内容
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      timeout-minutes: 10
      run: |
        echo "📦 安装 Python 依赖..."
        python -m pip install --upgrade pip
        pip install -r scripts/requirements.txt
        pip install beautifulsoup4 lxml  # Product Hunt分析需要的额外依赖
        echo "✅ 依赖安装完成"

    - name: Check Python syntax
      run: |
        echo "🔍 检查Python语法..."
        python -m py_compile scripts/producthunt_analyzer.py
        echo "✅ 语法检查通过"

    - name: Setup Hugo
      uses: peaceiris/actions-hugo@v3
      with:
        hugo-version: 'latest'
        extended: true

    - name: Configure Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

    - name: Run Product Hunt analyzer
      id: analyzer
      timeout-minutes: 30
      continue-on-error: true
      env:
        GITHUB_ACTIONS: true
      run: |
        echo "🚀 开始运行Product Hunt TOP3分析器..."
        cd ${{ github.workspace }}
        if ! python scripts/producthunt_analyzer.py; then
          echo "❌ 分析器运行失败，请检查日志"
          echo "analyzer_success=false" >> $GITHUB_OUTPUT
        else
          echo "✅ 分析器运行成功"
          echo "analyzer_success=true" >> $GITHUB_OUTPUT
        fi

    - name: Check for new articles
      id: check_articles
      run: |
        NEW_ARTICLES=$(find content/posts -name "*producthunt-top3*$(date +%Y-%m-%d)*" -type f | wc -l)
        echo "new_articles=$NEW_ARTICLES" >> $GITHUB_OUTPUT
        echo "Found $NEW_ARTICLES new Product Hunt articles for today"

    - name: Build Hugo site
      if: steps.check_articles.outputs.new_articles > 0
      timeout-minutes: 10
      run: |
        echo "🏗️ 构建 Hugo 站点..."
        hugo --cleanDestinationDir --minify
        echo "✅ 站点构建完成"

    - name: Commit and push changes
      if: steps.check_articles.outputs.new_articles > 0
      run: |
        git add .
        if ! git diff --staged --quiet; then
          git commit -m "🤖 Auto: Daily Product Hunt TOP3 analysis $(date +%Y-%m-%d) - ${{ steps.check_articles.outputs.new_articles }} articles"
          git push
        else
          echo "No changes to commit"
        fi

    - name: Create summary
      if: always()
      run: |
        echo "## 📊 Daily Product Hunt TOP3 Analysis Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Date**: $(date +%Y-%m-%d)" >> $GITHUB_STEP_SUMMARY
        echo "- **New Articles**: ${{ steps.check_articles.outputs.new_articles }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Analyzer Status**: ${{ steps.analyzer.outcome }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Overall Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.check_articles.outputs.new_articles }}" -gt 0 ]; then
          echo "- **Result**: ✅ Successfully generated and published" >> $GITHUB_STEP_SUMMARY
          echo "### 📄 Generated Articles:" >> $GITHUB_STEP_SUMMARY
          find content/posts -name "*producthunt-top3*$(date +%Y-%m-%d)*" -type f -exec basename {} \; | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Result**: ℹ️ No new Product Hunt articles generated today" >> $GITHUB_STEP_SUMMARY
        fi
        
        # 显示历史统计
        if [ -f "data/producthunt_products.json" ]; then
          TOTAL_PRODUCTS=$(python3 -c "import json; print(json.load(open('data/producthunt_products.json'))['total_products'])" 2>/dev/null || echo "0")
          echo "- **Total Analyzed Product Hunt Products**: $TOTAL_PRODUCTS" >> $GITHUB_STEP_SUMMARY
        fi